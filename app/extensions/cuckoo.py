import tempfile
import concurrent.futures
import requests
import time
from app.utils import preprocessing
from app.models.cuckoo import Cuckoo

class CuckooExecutor():
    """
    cuckoo executor is an extension for handling cuckoo task
    """

    def __init__(self):
        self.executor = None
        self.cuckoo_url = ""
        self.futures = {}  # all task appear here

    def init_app(self, app):
        self.executor = concurrent.futures.ThreadPoolExecutor(
            max_workers=app.config['MAX_WORKERS'])
        self.cuckoo_url = app.config['CUCKOO_URL']
        self.cuckoo_token = app.config['CUCKOO_TOKEN']

    def submit(self, id, file):
        """
        Submit a file to cuckoo_executor

        :param file: the uploaded file
        """
        def task(id, f):
            """
            Submit a new task to cuckoo and pooling it until finished

            :param f: fpath or fhandle
            """
            with open(f, 'rb') as file:
                file = {"file": file}
                headers = {"Authorization": self.cuckoo_token}
                r = requests.post(
                    self.cuckoo_url + '/tasks/create/file',
                    files=file,
                    headers=headers)
                cuckoo_id = r.json()['task_id']
                done = False
                while not done:
                    time.sleep(3)
                    r = requests.get(
                        self.cuckoo_url + '/tasks/view/' + str(cuckoo_id),
                        headers=headers)
                    if r.json()['task']['status'] == 'reported':
                        re = {'report': requests.get(
                            self.cuckoo_url +
                            '/tasks/report/' + str(cuckoo_id),
                            headers=headers
                        ).json()}  # intentionally wrap it for sanity_correct

                        def sanity_correct(d, k):
                            """
                            sanity_correct the report

                            :param d: {'report': cuckoo_report}
                            :param k: 'report'
                            """
                            if type(d[k]) == str:
                                try:
                                    d[k] = d[k].encode(
                                        'utf-16', 'surrogatepass').decode('utf-16')
                                except UnicodeDecodeError:
                                    d[k] = ascii(d[k])
                                    pass
                            elif type(d[k]) == list:
                                for i in range(len(d[k])):
                                    sanity_correct(d[k], i)
                            elif type(d[k]) == dict:
                                for i in d[k].keys():
                                    sanity_correct(d[k], i)
                            else:
                                return

                        sanity_correct(re, 'report')
                        rep = preprocessing(re['report'])
                        rep.id = id
                        rep.validate()
                        rep.save()  # save report to mongo
                        done = True

        if id in self.futures or len(Cuckoo.objects(task_id=id)) >= 1: # filter duplicate files
            return 

        # backup the file
        _, fpath = tempfile.mkstemp()
        with open(fpath, 'wb') as t:
            t.write(file.read())
            file.seek(0)

        self.futures[id] = self.executor.submit(task, id, fpath)

    def status(self, id):
        """
        Check the status of a submitted task

        :param id: task id generated by cuckoo
        :return: "running", "done", ...     
        """
        if id in self.futures:
            if self.futures[id].running():
                return "running"
            elif self.futures[id].exception():
                return "exception"
            elif self.futures[id].done():
                return "done"
            else:
                return "error"
        else:
            if len(Cuckoo.objects(task_id=id)) >= 1:
                return "done"
            else:
                return "error"
            

    def result(self, id):
        """
        Get the result of the task 

        :param id: task id
        :return: generated report if task exists and finished, else return None
        """    
        if len(Cuckoo.objects(task_id=id)) >= 1:
            return Cuckoo.objects(task_id=id).first()
        else:
            return None
