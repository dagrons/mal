from .transform import get_asm_from_bytes, get_bytes_from_file  # 格式转换
from .malware_classification.scripts.transform import pe2bmp
from .analyze import analyze as model_analyze  # 模型分析
import concurrent.futures
import tempfile
from app.models.local import Local

class LocalExecutor():
    """
    including family analysis, homogenity analysis
    """

    def __init__(self):
        self.executor = None
        self.cuckoo_url = ""
        self.res = {}  # all result of finished task will appear here
        self.futures = {}  # all task appear here

    def init_app(self, app):
        self.executor = concurrent.futures.ThreadPoolExecutor(
            max_workers=app.config['MAX_WORKERS'])        

    def submit(self, id, file):
        """
        Submit a task to local_executor

        :param id: task id
        :param file: fpath or fhandle        
        """
        def task(id, f):
            """
            Submit a new task to local_executor

            :param id: task id
            :param f: fpath or fhandle
            """
            res = Local()
            upath = f # upath: upload path
            af, afpath = tempfile.mkstemp(suffix='.asm')  # contians only opcode
            bf, bfpath = tempfile.mkstemp(suffix='.bytes')  # contains only .text section
            pf, pfpath = tempfile.mkstemp(suffix='.bmp')   # contains only .text, .data, .rdata sections

            get_bytes_from_file(upath, bfpath)
            get_asm_from_bytes(bfpath, afpath)


            try:
                pe2bmp(upath, pfpath)
            except:
                task['status'] = 'error'
                task['msg'] = '.text, .data, or .rdata sections are not found!'
                return

            res = Local()
            res.asm_file.put(open(af, 'rb'))
            res.bytes_file.put(open(bf, 'rb'))
            res.bmp_file.put(open(pf, 'rb'))

            res.malware_classification_resnet34, res.malware_sim_doc2vec = model_analyze(
                bfpath, pfpath)

            # convert prob dict to prob list
            t = {}
            prob_families = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo',
                            'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator', 'Gatak']
            for k, v in zip(prob_families, res.malware_classification_resnet34):
                t[k] = v
            res.malware_classification_resnet34 = t            
            res.task_id = id
            self.res[id] = res
            res.validate()
            res.save()
        
        _, fpath = tempfile.mkstemp()
        with open(fpath, 'wb') as t:
            t.write(file.read())
            file.seek(0)
        
        self.futures[id] = self.executor.submit(task, id, fpath)        

    def status(self, id):
        """
        Check the status of a submitted task

        :param id: task id generated by cuckoo
        :return: "running", "done", ...     
        """
        if self.futures[id].running():
            return "running"
        elif self.futures[id].exception():
            return "exception"
        elif self.futures[id].done():
            return "done"
        else:
            return "error"

    def result(self, id):
        """
        Get the result of the task 

        :param id: task id
        :return: generated report if task exists and finished, else return None
        """
        if id in self.res and self.futures[id].done(): # task in queue and finished
            return self.res[id]      
        elif len(Local.objects(task_id=id)) >= 1:
            return Local.objects(task_id=id).first()
        else:
            return None
